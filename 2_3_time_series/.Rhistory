FreeThrows
FreeThrowsAttempts
myplot <- function(data, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4, 6))
legend("bottomleft", inset=0.01,
legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
#Dear Student,
#
#Welcome to the world of Basketball Data!
#I'm sure you will enjoy this section of the R Programming course.
#
#Instructions for this dataset:
# Simply select ALL the lines in this script by pressing
# CTRL+A on Windows or CMND+A on a Mac and execute them
# Once you have executed the commands the following objects
# will be created:
# Matrices:
# - FieldGoalAttempts
# - FieldGoals
# - Games
# - MinutesPlayed
# - Salary
# Vectors:
# - Players
# - Seasons
#We will go understand these inside the course.
#
#Sincerely,
#Kirill Eremenko
#www.superdatascience.com
#Copyright: These datasets were prepared using publicly available data.
#           However, theses scripts are subject to Copyright Laws.
#           If you wish to use these R scripts outside of the R Programming Course
#           by Kirill Eremenko, you may do so by referencing www.superdatascience.com in your work.
#Comments:
#Seasons are labeled based on the first year in the season
#E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Salaries
KobeBryant_Salary <- c(15946875,17718750,19490625,21262500,23034375,24806250,25244493,27849149,30453805,23500000)
JoeJohnson_Salary <- c(12000000,12744189,13488377,14232567,14976754,16324500,18038573,19752645,21466718,23180790)
LeBronJames_Salary <- c(4621800,5828090,13041250,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
CarmeloAnthony_Salary <- c(3713640,4694041,13041250,14410581,15779912,17149243,18518574,19450000,22407474,22458000)
DwightHoward_Salary <- c(4493160,4806720,6061274,13758000,15202590,16647180,18091770,19536360,20513178,21436271)
ChrisBosh_Salary <- c(3348000,4235220,12455000,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
ChrisPaul_Salary <- c(3144240,3380160,3615960,4574189,13520500,14940153,16359805,17779458,18668431,20068563)
KevinDurant_Salary <- c(0,0,4171200,4484040,4796880,6053663,15506632,16669630,17832627,18995624)
DerrickRose_Salary <- c(0,0,0,4822800,5184480,5546160,6993708,16402500,17632688,18862875)
DwayneWade_Salary <- c(3031920,3841443,13041250,14410581,15779912,14200000,15691000,17182000,18673000,15000000)
#Matrix
Salary <- rbind(KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary)
rm(KobeBryant_Salary, JoeJohnson_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, LeBronJames_Salary, ChrisPaul_Salary, DerrickRose_Salary, DwayneWade_Salary, KevinDurant_Salary)
colnames(Salary) <- Seasons
rownames(Salary) <- Players
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
#Minutes Played
KobeBryant_MP <- c(3277,3140,3192,2960,2835,2779,2232,3013,177,1207)
JoeJohnson_MP <- c(3340,2359,3343,3124,2886,2554,2127,2642,2575,2791)
LeBronJames_MP <- c(3361,3190,3027,3054,2966,3063,2326,2877,2902,2493)
CarmeloAnthony_MP <- c(2941,2486,2806,2277,2634,2751,1876,2482,2982,1428)
DwightHoward_MP <- c(3021,3023,3088,2821,2843,2935,2070,2722,2396,1223)
ChrisBosh_MP <- c(2751,2658,2425,2928,2526,2795,2007,2454,2531,1556)
ChrisPaul_MP <- c(2808,2353,3006,3002,1712,2880,2181,2335,2171,2857)
KevinDurant_MP <- c(1255,1255,2768,2885,3239,3038,2546,3119,3122,913)
DerrickRose_MP <- c(1168,1168,1168,3000,2871,3026,1375,0,311,1530)
DwayneWade_MP <- c(2892,1931,1954,3048,2792,2823,1625,2391,1775,1971)
#Matrix
MinutesPlayed <- rbind(KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP)
rm(KobeBryant_MP, JoeJohnson_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, LeBronJames_MP, ChrisPaul_MP, DerrickRose_MP, DwayneWade_MP, KevinDurant_MP)
colnames(MinutesPlayed) <- Seasons
rownames(MinutesPlayed) <- Players
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Games
Games
#FTA per game
myplot(FreeThrowsAttempts/Games)
myplot(FreeThrows/FreeThrowsAttempts)
myplot(FieldGoalAttempts-FreeThrowAttempts)
myplot(FieldGoalAttempts-FreeThrowsAttempts)
myplot((FieldGoalAttempts-FreeThrowsAttempts)/Games)
myplot((Points-FreeThrows)/FieldGoals)
myplot(round((Points-FreeThrows)/FieldGoals, 0))
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
# Average number of points per fieldgoal
myplot((Points-FreeThrows)/FieldGoals)
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
#FT Attempts per game
myplot(FreeThrowsAttempts/Games)
#Free Throw Accuracy
myplot(FreeThrows/FreeThrowsAttempts)
# Does the player prefer 2 pointers or 3 pointers?
myplot(round((Points-FreeThrows)/FieldGoals, 1))
#FT Attempts per game
myplot(FreeThrowsAttempts/Games)
#Free Throw Accuracy
myplot(FreeThrows/FreeThrowsAttempts)
myplot(FieldGoals/FieldGoalAttempts)
knitr::opts_chunk$set(echo = TRUE)
# clear memory
rm(list=ls())
# check memory
gc()
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
install.packages("jsonlite")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
# import files
WLS_educ <- read.dta("data/WLS_educ.dta")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files.
library(foreign) # reading old versions of stata, spss, sas files.
library(sjmisc) # data and variable transformations
# import files
WLS_educ <- read.dta("data/WLS_educ.dta")
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
rm(list=ls())
# check memory
gc()
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files.
library(foreign) # reading old versions of stata, spss, sas files.
library(sjmisc) # data and variable transformations
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
# set directory
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
# import files
WLS_educ <- read_dta("data/WLS_educ.dta")
WLS_health <- read_dta("data/WLS_health.dta")
# cbind WLC_educ and WLS_health together into on dataframe
WLS <- cbind(WLS_educ, WLS_health)
head(WLS)
# Select only the columns that we need
WLS <- select(WLS, brdxdy, sexrsp, edfa57q, edmo57q, spouse_edu, resp_edu, health)
colnames(WLS_educ)
colnames(WLS_educ)
colnames(WLS_health)
colnames(WLS)
# Use mutate to create two new variables
# Seperate spouse education and respondent education into three categories
WLS <- mutate (WLS,
r_edu = case_when(
resp_edu ==12 ~ "1 HS or Less",
resp_edu >= 13 & resp_edu <16 ~ "2 Some College",
resp_edu >=16 & resp_edu ~ "3 BA or more"))
WLS <- mutate (WLS,
sp_edu = case_when (
spouse_edu == 12 ~ "1 HS or Less",
spouse_edu >=13 & spouse_edu < 16 ~ "2 Some College",
spouse_edu >=16 ~ "3 BA or more"))
colnames(WLS)
levels(WLS$r_edu)
str(WLS)
summary(WLS)
glimpse(WLS)
# basic cross tabulation of frequencies======
table(WLS$r_edu, WLS$sp_edu)
# cross table of proportions================
prop.table(table(WLS$r_edu, WLS$sp_edu), 1)
# chi-square test===========================
chisq.test(WLS$r_edu, WLS$sp_edu)
library(expss) # package to make cross-tabulations tables
library(descr) # (For some reason R can't use crosstab without descr)
# Make fancier cross tabs with expss package
educTable <- crosstab(WLS$r_edu,
WLS$sp_edu,
prop.r = T,
chisq = T,
dnn=c("Respondent's education",
"Spouse's education"))
educTable
WLS <- mutate (WLS,
mar_types = case_when (
r_edu == sp_edu ~ "homogamous",
sexrsp == 1 & r_edu == "1 HS or Less" & (sp_edu == "2 Some College" | sp_edu == "3 BA or more") ~ "hypogamous",
sexrsp == 1 & r_edu == "2 Some College" & sp_edu == "3 BA or more" ~ "hypogamous",
sexrsp == 2 & sp_edu == "1 HS or Less" & (r_edu == "2 Some College" | r_edu == "3 BA or more") ~ "hypogamous",
sexrsp == 2 & sp_edu == "2 Some College" & r_edu == "3 BA or more" ~ "hypogamous",
TRUE ~ "hypergamous"))
WLS <- mutate(WLS, isHomo = ifelse(WLS$mar_types == "homogamous", 1, 0))
WLS <- mutate(WLS, isHypo = ifelse(WLS$mar_types == "hypogamous", 1, 0))
WLS <- mutate(WLS, isHyper = ifelse(WLS$mar_types == "hypergamous", 1, 0))
# check column names
colnames(WLS)
# show frequency distribution table
freq(WLS$mar_types)
# basic cross tabulation of frequencies======
table(WLS$r_edu, WLS$health)
# cross table of proportions================
prop.table(table(WLS$r_edu, WLS$health), 1)
# chi-square test===========================
chisq.test(WLS$r_edu, WLS$health)
# Use apply_labels on DataFrame GSS =====================
WLS = apply_labels(WLS, health = c("1 Least Healthy" = 1,
"2 Less Healthy"= 2,
"3 More Healthy" = 3,
"4 Most Healthy" = 4))
# Make fancier cross tabs with expss package
healthTable <- crosstab(WLS$r_edu,
WLS$health,
prop.r = T,
chisq = T,
dnn=c("Respondent's Education",
"Respondent's Health"))
healthTable
# basic cross tabulation of frequencies======
table(WLS$mar_types, WLS$health)
# cross table of proportions================
prop.table(table(WLS$mar_types, WLS$health), 1)
# chi-square test===========================
chisq.test(WLS$mar_types, WLS$health)
# Use apply_labels on DataFrame GSS =====================
WLS = apply_labels(WLS, health = c("1 Least Healthy" = 1,
"2 Less Healthy"= 2,
"3 More Healthy" = 3,
"4 Most Healthy" = 4))
# Make fancier cross tabs with expss package
mar_healthTable <- crosstab(WLS$mar_types,
WLS$health,
prop.r = T,
chisq = T,
dnn=c("Marriage Type",
"Respondent's Health"))
mar_healthTable
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())   # clear memory
gc()
setwd("C:/Users/Oscar Ko/Desktop/Review-Stats-R")
library(tidyverse) #importing, cleaning, recoding, and analyzing data
library(magrittr) # pipe operator
library(haven) # reading recent versions of stata, spss, sas files. For earlier versions, use the "foreign" package
library(foreign)
library(sjmisc) # data and variable transformations
library(expss) # package to make cross-tabulations tables
library(dplyr)
library(descr)
#Importing stata files:
WLS_educ <- read_dta("data/WLS_educ.dta")
WLS_health <- read_dta("data/WLS_health.dta")
# Examining the two data sets shows you that WLS_health has 2 variables (id and health). There are 4,641 unique individuals. These individuals are the same individuals in WLS_educ. WLS_educ has 7 variables but does not have the health variable.
glimpse(WLS_educ)
glimpse(WLS_health)
# Use the bind command to combine 2 data sets and create a new data frame, WLS. In this code, I have also included an additional step that filters in only the variables that I will use to analyze memo 4.
WLS <- cbind(WLS_educ, WLS_health) %>%
select(brdxdy, sexrsp, edfa57q, edmo57q, spouse_edu, resp_edu, health)
glimpse(WLS)
# Creating new categorical educational attainment variables for respondent and spouse
WLS <- WLS %>%
mutate (
r_edu = case_when(
resp_edu ==12 ~ "1 HS or Less",
resp_edu >= 13 & resp_edu <16 ~ "2 Some College",
resp_edu >=16 & resp_edu ~ "3 BA or more"),
sp_edu = case_when (
spouse_edu == 12 ~ "1 HS or Less",
spouse_edu >=13 & spouse_edu < 16 ~ "2 Some College",
spouse_edu >=16 ~ "3 BA or more"))
table(WLS$r_edu, WLS$sp_edu) #basic cross tabulation of frequencies
prop.table(table(WLS$r_edu, WLS$sp_edu), 1)
chisq.test(WLS$r_edu, WLS$sp_edu)
crosstab(WLS$r_edu, WLS$sp_edu, prop.r = T, chisq = T, dnn=c("Respondent's education", "Spouse's education"))
# Creating marriage type variable
WLS <- WLS %>%
mutate(
homogamous = ifelse(r_edu == sp_edu, 1, 0 ),
hypergamous = ifelse(sexrsp == 1 & r_edu > sp_edu | sexrsp == 2 & r_edu < sp_edu, 1, 0),
hypogamous = ifelse(sexrsp == 2 & r_edu > sp_edu | sexrsp == 1 & r_edu < sp_edu, 1, 0),
marriage_type = case_when(
homogamous==1 ~ "1 Homogamous",
hypergamous==1 ~ "2 Hypergamous",
hypogamous==1 ~ "3 Hypogamous"
))
frequency(WLS$homogamous)
frequency(WLS$hypergamous)
frequency(WLS$hypogamous)
table(WLS$marriage_type, WLS$homogamous)
table(WLS$marriage_type, WLS$hypergamous)
table(WLS$marriage_type, WLS$hypogamous)
WLS <- WLS %>%
mutate(
health4 = case_when(
health==1 ~ "1 Fair or less",
health==2 ~ "2 Good",
health==3 ~ "3 Very Good",
health==4 ~ "4 Excellent"
))
frequency(WLS$health4)
table(WLS$health, WLS$health4)
## Option 1
prop.table(table(WLS$r_edu, WLS$health4), 1)
chisq.test(WLS$r_edu, WLS$health)
prop.table(table(WLS$marriage_type, WLS$health4), 1)
chisq.test(WLS$r_edu, WLS$health)
## Option 2
flat_table(WLS, r_edu, health, margin = "row")
chisq.test(WLS$r_edu, WLS$health)
## Option 3
crosstab(WLS$r_edu, WLS$health4, prop.r = T, chisq = T, dnn=c("Education level", "Self-rated health"))
crosstab(WLS$marriage_type,
WLS$health4,
dnn=c("Marriage Type", "Self-Rated Health"),
prop.r = T,
chisq = T)
## Clear everything
rm(list = ls())
## Set working directory
setwd("C:/Users/Oscar Ko/Desktop/Interactive-Data-Vis-Fall2021/2_3_time_series")
## Check working directory
getwd()
data <- read.csv("datingAppSearches.csv")
head(data)
tail(data)
str(data)
colnames(data)
## library
library(tidyverse)
## Get only Tinder rows
test <- select[data, Week, Tinder]
colnames(data)
## Get only Tinder rows
test <- select(data, Week, Tinder)
## Get only Tinder rows
tinder <- select(data, Week, Tinder)
tinder$app <- rep("Tinder", nrows(data))
tinder$app <- rep("Tinder", nrow(data))
tinder
colnames(tinder)
colnames(tinder)[2] <- "searches"
## Get only Bumble rows
bumble <- select(data, Week, Bumble)
bumble$app <- rep("Bumble", nrow(data))
colnames(bumble)[2] <- "searches"
## Get only okcupid rows
okcupid <- select(data, Week, okcupid)
okcupid$app <- rep("okcupid", nrow(data))
colnames(okcupid)[2] <- "searches"
## Get only hinge rows
hinge <- select(data, Week, hinge)
hinge$app <- rep("hinge", nrow(data))
colnames(hinge)[2] <- "searches"
## Get only cmb rows
cmb <- select(data, Week, cmb)
cmb$app <- rep("cmb", nrow(data))
colnames(cmb)[2] <- "searches"
colnames(data)
## Get only okcupid rows
okcupid <- select(data, Week, Okcupid)
okcupid$app <- rep("okcupid", nrow(data))
colnames(okcupid)[2] <- "searches"
## Get only hinge rows
hinge <- select(data, Week, Hinge)
hinge$app <- rep("hinge", nrow(data))
colnames(hinge)[2] <- "searches"
## Get only cmb rows
cmb <- select(data, Week, Coffee.Meets.Bagel)
cmb$app <- rep("cmb", nrow(data))
colnames(cmb)[2] <- "searches"
## Stack all the rows ontop of each other
final.data <- rbind(tinder, bumble, okcupid, cmb, hinge)
final.data
head(final.data)
tail(final.data)
str(final.data)
head(data)
tail(data)
str(data)
colnames(data)
final.data$searches <- as.integer(final.data$searches)
head(final.data)
tail(final.data)
str(final.data)
View(final.data)
allNAs <- is.na(final.data$searches)
allNAs
tail(allNAs)
final.data <- replace(final.data$searches, is.na(final.data$searches), 0.5)
head(final.data)
tail(final.data)
str(final.data)
rm(list = ls())
## Set working directory
setwd("C:/Users/Oscar Ko/Desktop/Interactive-Data-Vis-Fall2021/2_3_time_series")
## Check working directory
getwd()
## Import data
data <- read.csv("datingAppSearches.csv")
## Examine data
head(data)
tail(data)
str(data)
colnames(data)
## library
library(tidyverse)
## Get only Tinder rows
tinder <- select(data, Week, Tinder)
tinder$app <- rep("Tinder", nrow(data))
colnames(tinder)[2] <- "searches"
## Get only Bumble rows
bumble <- select(data, Week, Bumble)
bumble$app <- rep("Bumble", nrow(data))
colnames(bumble)[2] <- "searches"
## Get only okcupid rows
okcupid <- select(data, Week, Okcupid)
okcupid$app <- rep("okcupid", nrow(data))
colnames(okcupid)[2] <- "searches"
## Get only hinge rows
hinge <- select(data, Week, Hinge)
hinge$app <- rep("hinge", nrow(data))
colnames(hinge)[2] <- "searches"
## Get only cmb rows
cmb <- select(data, Week, Coffee.Meets.Bagel)
cmb$app <- rep("cmb", nrow(data))
colnames(cmb)[2] <- "searches"
## Stack all the rows ontop of each other
final.data <- rbind(tinder, bumble, okcupid, cmb, hinge)
final.data$searches <- as.integer(final.data$searches)
final.data$searches <- replace(final.data$searches, is.na(final.data$searches), 0.5)
head(final.data)
tail(final.data)
str(final.data)
View(final.data)
View(final.data)
# Export dataframe to CSV
write.csv(final.data, getwd() + "File Name.csv", row.names = T)
# Export dataframe to CSV
write.csv(final.data, "appSearches.csv", row.names = T)
